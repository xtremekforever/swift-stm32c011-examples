// Generated by svd2swift.
//
// Modified by Jesse L. Zamora <xtremekforever@gmail.com> to remove duplication between GPIOs
// generated by svd2swift, since each GPIO has the same definition.
//

import MMIO

/// GPIO address block description
@RegisterBlock
public struct GPIO: Sendable {
    /// GPIO port mode register
    @RegisterBlock(offset: 0x0)
    public var moder: Register<MODER>

    /// GPIO port output type register
    @RegisterBlock(offset: 0x4)
    public var otyper: Register<OTYPER>

    /// GPIO port output speed register
    @RegisterBlock(offset: 0x8)
    public var ospeedr: Register<OSPEEDR>

    /// GPIO port pull-up/pull-down register
    @RegisterBlock(offset: 0xc)
    public var pupdr: Register<PUPDR>

    /// GPIO port input data register
    @RegisterBlock(offset: 0x10)
    public var idr: Register<IDR>

    /// GPIO port output data register
    @RegisterBlock(offset: 0x14)
    public var odr: Register<ODR>

    /// GPIO port bit set/reset register
    @RegisterBlock(offset: 0x18)
    public var bsrr: Register<BSRR>

    /// GPIO port configuration lock register
    @RegisterBlock(offset: 0x1c)
    public var lckr: Register<LCKR>

    /// GPIO alternate function low register
    @RegisterBlock(offset: 0x20)
    public var afrl: Register<AFRL>

    /// GPIO alternate function high register
    @RegisterBlock(offset: 0x24)
    public var afrh: Register<AFRH>

    /// GPIO port bit reset register
    @RegisterBlock(offset: 0x28)
    public var brr: Register<BRR>
}

extension GPIO {
    /// GPIO port mode register
    @Register(bitWidth: 32)
    public struct MODER {
        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 0..<2)
        public var mode0: MODE0

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 2..<4)
        public var mode1: MODE1

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 4..<6)
        public var mode2: MODE2

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 6..<8)
        public var mode3: MODE3

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 8..<10)
        public var mode4: MODE4

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 10..<12)
        public var mode5: MODE5

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 12..<14)
        public var mode6: MODE6

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 14..<16)
        public var mode7: MODE7

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 16..<18)
        public var mode8: MODE8

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 18..<20)
        public var mode9: MODE9

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 20..<22)
        public var mode10: MODE10

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 22..<24)
        public var mode11: MODE11

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 24..<26)
        public var mode12: MODE12

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 26..<28)
        public var mode13: MODE13

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 28..<30)
        public var mode14: MODE14

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to set the I/O to one of four operating modes.
        @ReadWrite(bits: 30..<32)
        public var mode15: MODE15
    }

    /// GPIO port output type register
    @Register(bitWidth: 32)
    public struct OTYPER {
        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 0..<1)
        public var ot0: OT0

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 1..<2)
        public var ot1: OT1

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 2..<3)
        public var ot2: OT2

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 3..<4)
        public var ot3: OT3

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 4..<5)
        public var ot4: OT4

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 5..<6)
        public var ot5: OT5

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 6..<7)
        public var ot6: OT6

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 7..<8)
        public var ot7: OT7

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 8..<9)
        public var ot8: OT8

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 9..<10)
        public var ot9: OT9

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 10..<11)
        public var ot10: OT10

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 11..<12)
        public var ot11: OT11

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 12..<13)
        public var ot12: OT12

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 13..<14)
        public var ot13: OT13

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 14..<15)
        public var ot14: OT14

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output type.
        @ReadWrite(bits: 15..<16)
        public var ot15: OT15
    }

    /// GPIO port output speed register
    @Register(bitWidth: 32)
    public struct OSPEEDR {
        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 0..<2)
        public var ospeed0: OSPEED0

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 2..<4)
        public var ospeed1: OSPEED1

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 4..<6)
        public var ospeed2: OSPEED2

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 6..<8)
        public var ospeed3: OSPEED3

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 8..<10)
        public var ospeed4: OSPEED4

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 10..<12)
        public var ospeed5: OSPEED5

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 12..<14)
        public var ospeed6: OSPEED6

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 14..<16)
        public var ospeed7: OSPEED7

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 16..<18)
        public var ospeed8: OSPEED8

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 18..<20)
        public var ospeed9: OSPEED9

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 20..<22)
        public var ospeed10: OSPEED10

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 22..<24)
        public var ospeed11: OSPEED11

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 24..<26)
        public var ospeed12: OSPEED12

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 26..<28)
        public var ospeed13: OSPEED13

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 28..<30)
        public var ospeed14: OSPEED14

        /// Port x configuration for I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O output speed.
        /// Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..
        /// The FT_c GPIOs cannot be set to high speed.
        @ReadWrite(bits: 30..<32)
        public var ospeed15: OSPEED15
    }

    /// GPIO port pull-up/pull-down register
    @Register(bitWidth: 32)
    public struct PUPDR {
        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 0..<2)
        public var pupd0: PUPD0

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 2..<4)
        public var pupd1: PUPD1

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 4..<6)
        public var pupd2: PUPD2

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 6..<8)
        public var pupd3: PUPD3

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 8..<10)
        public var pupd4: PUPD4

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 10..<12)
        public var pupd5: PUPD5

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 12..<14)
        public var pupd6: PUPD6

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 14..<16)
        public var pupd7: PUPD7

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 16..<18)
        public var pupd8: PUPD8

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 18..<20)
        public var pupd9: PUPD9

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 20..<22)
        public var pupd10: PUPD10

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 22..<24)
        public var pupd11: PUPD11

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 24..<26)
        public var pupd12: PUPD12

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 26..<28)
        public var pupd13: PUPD13

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 28..<30)
        public var pupd14: PUPD14

        /// Port x configuration I/O y (y = 15 to 0)
        /// These bits are written by software to configure the I/O pull-up or pull-down
        @ReadWrite(bits: 30..<32)
        public var pupd15: PUPD15
    }

    /// GPIO port input data register
    @Register(bitWidth: 32)
    public struct IDR {
        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 0..<1)
        public var id0: ID0

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 1..<2)
        public var id1: ID1

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 2..<3)
        public var id2: ID2

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 3..<4)
        public var id3: ID3

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 4..<5)
        public var id4: ID4

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 5..<6)
        public var id5: ID5

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 6..<7)
        public var id6: ID6

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 7..<8)
        public var id7: ID7

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 8..<9)
        public var id8: ID8

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 9..<10)
        public var id9: ID9

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 10..<11)
        public var id10: ID10

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 11..<12)
        public var id11: ID11

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 12..<13)
        public var id12: ID12

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 13..<14)
        public var id13: ID13

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 14..<15)
        public var id14: ID14

        /// Port x input data I/O y (y = 15 to 0)
        /// These bits are read-only. They contain the input value of the corresponding I/O port.
        @ReadOnly(bits: 15..<16)
        public var id15: ID15
    }

    /// GPIO port output data register
    @Register(bitWidth: 32)
    public struct ODR {
        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 0..<1)
        public var od0: OD0

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 1..<2)
        public var od1: OD1

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 2..<3)
        public var od2: OD2

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 3..<4)
        public var od3: OD3

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 4..<5)
        public var od4: OD4

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 5..<6)
        public var od5: OD5

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 6..<7)
        public var od6: OD6

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 7..<8)
        public var od7: OD7

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 8..<9)
        public var od8: OD8

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 9..<10)
        public var od9: OD9

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 10..<11)
        public var od10: OD10

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 11..<12)
        public var od11: OD11

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 12..<13)
        public var od12: OD12

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 13..<14)
        public var od13: OD13

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 14..<15)
        public var od14: OD14

        /// Port output data I/O y (y = 15 to 0)
        /// These bits can be read and written by software.
        /// Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A, B, C, D, F).
        @ReadWrite(bits: 15..<16)
        public var od15: OD15
    }

    /// GPIO port bit set/reset register
    @Register(bitWidth: 32)
    public struct BSRR {
        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 0..<1)
        public var bs0: BS0

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 1..<2)
        public var bs1: BS1

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 2..<3)
        public var bs2: BS2

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 3..<4)
        public var bs3: BS3

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 4..<5)
        public var bs4: BS4

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 5..<6)
        public var bs5: BS5

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 6..<7)
        public var bs6: BS6

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 7..<8)
        public var bs7: BS7

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 8..<9)
        public var bs8: BS8

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 9..<10)
        public var bs9: BS9

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 10..<11)
        public var bs10: BS10

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 11..<12)
        public var bs11: BS11

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 12..<13)
        public var bs12: BS12

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 13..<14)
        public var bs13: BS13

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 14..<15)
        public var bs14: BS14

        /// Port x set I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 15..<16)
        public var bs15: BS15

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 16..<17)
        public var br0: BR0

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 17..<18)
        public var br1: BR1

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 18..<19)
        public var br2: BR2

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 19..<20)
        public var br3: BR3

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 20..<21)
        public var br4: BR4

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 21..<22)
        public var br5: BR5

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 22..<23)
        public var br6: BR6

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 23..<24)
        public var br7: BR7

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 24..<25)
        public var br8: BR8

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 25..<26)
        public var br9: BR9

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 26..<27)
        public var br10: BR10

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 27..<28)
        public var br11: BR11

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 28..<29)
        public var br12: BR12

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 29..<30)
        public var br13: BR13

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 30..<31)
        public var br14: BR14

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        /// Note: If both BSx and BRx are set, BSx has priority.
        @WriteOnly(bits: 31..<32)
        public var br15: BR15
    }

    /// GPIO port configuration lock register
    @Register(bitWidth: 32)
    public struct LCKR {
        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 0..<1)
        public var lck0: LCK0

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 1..<2)
        public var lck1: LCK1

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 2..<3)
        public var lck2: LCK2

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 3..<4)
        public var lck3: LCK3

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 4..<5)
        public var lck4: LCK4

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 5..<6)
        public var lck5: LCK5

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 6..<7)
        public var lck6: LCK6

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 7..<8)
        public var lck7: LCK7

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 8..<9)
        public var lck8: LCK8

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 9..<10)
        public var lck9: LCK9

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 10..<11)
        public var lck10: LCK10

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 11..<12)
        public var lck11: LCK11

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 12..<13)
        public var lck12: LCK12

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 13..<14)
        public var lck13: LCK13

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 14..<15)
        public var lck14: LCK14

        /// Port x lock I/O pin y (y = 15 to 0)
        /// These bits are read/write but can only be written when the LCKK bit is ‘0.
        @ReadWrite(bits: 15..<16)
        public var lck15: LCK15

        /// Lock key
        /// This bit can be read any time. It can only be modified using the lock key write sequence.
        /// LOCK key write sequence:
        /// WR LCKR[16] = ‘1’ + LCKR[15:0]
        /// WR LCKR[16] = ‘0’ + LCKR[15:0]
        /// WR LCKR[16] = ‘1’ + LCKR[15:0]
        /// RD LCKR
        /// RD LCKR[16] = ‘1’ (this read operation is optional but it confirms that the lock is active)
        /// Note: During the LOCK key write sequence, the value of LCK[15:0] must not change.
        /// Any error in the lock sequence aborts the lock.
        /// After the first lock sequence on any bit of the port, any read access on the LCKK bit returns ‘1’ until the next MCU reset or peripheral reset.
        @ReadWrite(bits: 16..<17)
        public var lckk: LCKK
    }

    /// GPIO alternate function low register
    @Register(bitWidth: 32)
    public struct AFRL {
        /// Alternate function selection for port x pin y (y = 0 to 7)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 0..<4)
        public var afsel0: AFSEL0

        /// Alternate function selection for port x pin y (y = 0 to 7)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 4..<8)
        public var afsel1: AFSEL1

        /// Alternate function selection for port x pin y (y = 0 to 7)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 8..<12)
        public var afsel2: AFSEL2

        /// Alternate function selection for port x pin y (y = 0 to 7)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 12..<16)
        public var afsel3: AFSEL3

        /// Alternate function selection for port x pin y (y = 0 to 7)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 16..<20)
        public var afsel4: AFSEL4

        /// Alternate function selection for port x pin y (y = 0 to 7)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 20..<24)
        public var afsel5: AFSEL5

        /// Alternate function selection for port x pin y (y = 0 to 7)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 24..<28)
        public var afsel6: AFSEL6

        /// Alternate function selection for port x pin y (y = 0 to 7)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 28..<32)
        public var afsel7: AFSEL7
    }

    /// GPIO alternate function high register
    @Register(bitWidth: 32)
    public struct AFRH {
        /// Alternate function selection for port x, I/O y (y = 8 to 15)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 0..<4)
        public var afsel8: AFSEL8

        /// Alternate function selection for port x, I/O y (y = 8 to 15)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 4..<8)
        public var afsel9: AFSEL9

        /// Alternate function selection for port x, I/O y (y = 8 to 15)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 8..<12)
        public var afsel10: AFSEL10

        /// Alternate function selection for port x, I/O y (y = 8 to 15)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 12..<16)
        public var afsel11: AFSEL11

        /// Alternate function selection for port x, I/O y (y = 8 to 15)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 16..<20)
        public var afsel12: AFSEL12

        /// Alternate function selection for port x, I/O y (y = 8 to 15)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 20..<24)
        public var afsel13: AFSEL13

        /// Alternate function selection for port x, I/O y (y = 8 to 15)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 24..<28)
        public var afsel14: AFSEL14

        /// Alternate function selection for port x, I/O y (y = 8 to 15)
        /// These bits are written by software to configure alternate function I/Os
        @ReadWrite(bits: 28..<32)
        public var afsel15: AFSEL15
    }

    /// GPIO port bit reset register
    @Register(bitWidth: 32)
    public struct BRR {
        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 0..<1)
        public var br0: BR0

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 1..<2)
        public var br1: BR1

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 2..<3)
        public var br2: BR2

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 3..<4)
        public var br3: BR3

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 4..<5)
        public var br4: BR4

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 5..<6)
        public var br5: BR5

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 6..<7)
        public var br6: BR6

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 7..<8)
        public var br7: BR7

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 8..<9)
        public var br8: BR8

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 9..<10)
        public var br9: BR9

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 10..<11)
        public var br10: BR10

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 11..<12)
        public var br11: BR11

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 12..<13)
        public var br12: BR12

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 13..<14)
        public var br13: BR13

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 14..<15)
        public var br14: BR14

        /// Port x reset I/O y (y = 15 to 0)
        /// These bits are write-only. A read operation always returns 0x0000.
        @WriteOnly(bits: 15..<16)
        public var br15: BR15
    }
}
